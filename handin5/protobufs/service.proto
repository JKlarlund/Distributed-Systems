syntax = "proto3";

option go_package = "protobufs/";

service auctionService {
    rpc Bid(BidRequest) returns (BidResponse);
    rpc Result(ResultRequest) returns (ResultResponse);
    rpc AuctionStream(stream AuctionMessage) returns (stream AuctionMessage);
    rpc Join(JoinRequest) returns (JoinResponse);
    rpc Leave(LeaveRequest) returns (LeaveResponse);
    rpc SendHeartbeat(HeartbeatRequest) returns (HeartbeatResponse);
    rpc GetPrimary(Empty) returns (PrimaryResponse);
}

message BidRequest {
    int32 amount = 1; // Bid amount
    int32 bidder_id = 2; // The ID of the bidder
    int32 timestamp = 3;
}

message BidResponse {
    bool success = 1;
    int32 timestamp = 2;
}

message ResultRequest {
    int32 userID = 1;
    int32 timestamp = 2;
}

message ResultResponse {
    bool auction_ended = 1; // Whether the auction has ended
    int32 highest_bid = 2; // Current highest bid
    int32 highest_bidder = 3; // ID of the highest bidder
    int32 timestamp = 4;
}

message JoinRequest {
    int32 timestamp = 1;
}

message JoinResponse {
    string message = 1;
    int32 userID = 2;
    int32 timestamp = 3;
}

message LeaveRequest {
    int32 userID = 1;
    int32 timestamp = 2;
}

message LeaveResponse {
    int32 timestamp = 1;
}

message AuctionMessage {
    int32 userID = 1; // ID of the user involved in the message
    string message = 2; // Message (e.g., "New highest bid: $100")
    int32 timestamp = 3; // Logical or real-time timestamp of the message
    int32 bid = 4;
}

message HeartbeatRequest {
    int32 timestamp = 1;
}

message HeartbeatResponse {
    bool isAlive = 1;
}

message Empty {}

message PrimaryResponse {
    string address = 1;
    string statusMessage = 2; // Status message (e.g. Redirect to primary)
}